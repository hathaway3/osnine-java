<?xml version="1.0"?>
<chapter xmlns="http://docbook.org/ns/docbook">
  <title>Standard Functions and Procedures</title>
  <abstract>
    <para><application>OS-9 Pascal</application> includes a library of
    standard functions and procedures that perform a variety of useful
    tasks. These subprograms are <quote>built-in</quote>
    <application>OS-9 Pascal</application> and can be used in programs without any special declarations.
    This chapter describes the subprograms for mathematical and run-time control.
    Input/Output related standard subprograms are discussed in Chapter 8.</para>
    <para><application>OS-9 Pascal</application> includes all ISO
    standard functions (except DISPOSE, PACK, AND UNPACK) plus a number
    of additional non-standard functions, which are denoted by an asterisk
    where they appear in the descriptions that follow.</para>
  </abstract>
  <para>Standard Procedures:</para>
  <simplelist>
    <member>FIELDPUT</member>
    <member>ISOMOD</member>
    <member>MARK</member>
    <member>RELEASE</member>
    <member>NEW</member>
    <member>MATHABORT</member>
    <member>RIGHTJUST</member>
    <member>SYSTIME</member>
  </simplelist>
  <para>Standard Functions:</para>
  <simplelist>
    <member>ABS</member>
    <member>ADDRESS</member>
    <member>AFRAC</member>
    <member>AINT</member>
    <member>ARCTAN</member>
    <member>CHR</member>
    <member>CNVTREAL</member>
    <member>COS</member>
    <member>EXP</member>
    <member>FIELDGET</member>
    <member>LN</member>
    <member>MATHRESULT</member>
    <member>ODD</member>
    <member>ORD</member>
    <member>PRED</member>
    <member>ROUND</member>
    <member>SHELL</member>
    <member>SIN</member>
    <member>SIZEOF</member>
    <member>SQR</member>
    <member>SQRT</member>
    <member>SUCC</member>
    <member>TRUNC</member>
  </simplelist>
  <sect1>
    <title>Standard Procedures</title>
    <para>The following is a list of non-I/O-related standard procedures available. I/O related procedures are discussed in Chapter 8, The expected arguments and their type is given in the title line, followed by a description of the procedure's operation. Those procedures which are extensions added to <application>OS-9 Pascal</application>, but not called for in the ISO standard, are marked by <quote>*</quote>. Programs that use these functions may not be portable to other Pascal compilers.</para>
    <variablelist>
    <?dbfo list-presentation="blocks"?>
      <varlistentry>
        <term>Procedure FIELDPUT(variable-name, start-bit, length, value:integer)*</term>
        <listitem>
          <para>This procedure allows you to selectively set or reset bit fields in an integer. The start-bit defines the integer starting bit number of the field to be affected; 0 is the least significant bit and 15 is the most significant bit. Length defines the integer number of bits in the field, 1 through 16. Bits are affected starting at start-bit and proceeding toward the least significant bit with wrap around through the high order bit positions if necessary. The value will be stored in the specified field within the 16 bit 'integer-variable-name' variable. Only the least significant <quote>length</quote> bits of the value are used, any higher order bits are ignored.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Procedure ISOMOD(logical-value:boolean)*</term>
        <listitem>
          <para>If the value supplied is TRUE, use of the MOD operator works as per the language specification (this is the default mode). A value of FALSE implements the more classical MOD which allows a negative right argument and can return a negative result.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Procedure MARK(variable-name:pointer-type)*</term>
        <term>Procedure RELEASE(variable-name:pointer-type)*</term>
        <listitem>
          <para>MARK sets the current top of heap pointer to the value of the pointer variable. RELEASE is the opposite: it resets the current top of heap pointer to the value of the pointer variable.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Procedure NEW(variable-name:pointer-type)</term>
        <listitem>
          <para>Creates an undefined ("global")   variable of the pointer's type which is referenced by the pointer. Storage for the new variable remains allocated  even  if  allocated   within a  subprogram which is later exited.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Procedure MATHABORT(logical-value:boolean)*</term>
        <listitem>
          <para>If the value supplied is TRUE, arithmetic overflow,
          range error, and divide by zero errors will cause the program
          to abort (this is the default mode)* A value of FALSE will
          not abort the program and will keep the least significant bits
          of the result for integer overflow conditions and return zero
          for divide by zero conditions (See 12-4).</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Procedure RIGHTJUST(logical-value:boolean)*</term>
        <listitem>
          <para>If the value supplied is TRUE, then strings and character arrays are right justified as per the language specification for WRITE and WRITELN calls (this is the default mode)* A value of FALSE yields left justification. This affects formatting of character fields when a field width specifier is given.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Procedure SYSTIME(year, month, day, hour, minute, second:integer)*</term>
        <listitem>
          <para>Returns the current system date and time in the integer variables. If the system clock is not active or has not been initialized, zeros are returned.</para>
        </listitem>
      </varlistentry>
    </variablelist>
  </sect1>
  <sect1>
    <title>Standard Functions</title>
    <para>The following is a list of non-I/O-related standard functions
    available. I/O-related functions are discussed in Chapter 8, The
    expected arguments and their type, and the type of the value returned
    by the function is given in the title line, followed by a description
    of the function's operation. Those functions which are extensions
    added to <application>OS-9 Pascal</application> but not called for
    in the ISO standard are marked by <quote>*</quote>. Programs that use
    these functions may not be portable to other Pascal compilers.</para>
    <variablelist>
    <?dbfo list-presentation="blocks"?>
      <varlistentry>
        <term>Function ABS(expression:integer-or-real): same-type-as argument</term>
        <listitem>
          <para>Returns the absolute value of the argument, e.g., ABS(x) = |x|.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Function ADDRESS(variable-reference): integer*</term>
        <listitem>
          <para>Returns the actual memory address of the the specified variable. The variable reference can be a simple or complex type, or an element of a complex type. Note: actual memory addresses of program variables can change each time the program is run.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Function AFRAC (expression:real) : real*</term>
        <listitem>
          <para>Returns the fractional portion of the value of 'real-expression'. For instance, the result of AFRAC(3.14) is 0.14, and the result of AFRAC(-1.5895E-3) is -0.0015895.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Function AINT(expression:real): real*</term>
        <listitem>
          <para>Returns the integer portion of the value of 'real-expression'. For instance, the result of AINT(3.14) is 3.0, and the result of AINT(-0.0123) is 0.0.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Function ARCTAN(expression:integer-or-real): real</term>
        <listitem>
          <para>Performs the inverse trigonometric arc tangent function cosine on an integer or real argument expressed in radians. The result is of type real.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Function CHR(expression:integer): char</term>
        <listitem>
          <para>Returns a char-type result having the same numerical value as the integer argument, i.e., convert integer to char.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Function CNVTREAL(string-or-char-array): real*</term>
        <listitem>
          <para>The string constant or the contents of the character array is converted to a real value. If a string constant is used, it must be at least 2 characters long. If a character array is used, a carriage return must be put in the array to terminate the conversion process.  A carriage return character has a decimal value of 13.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Function COS(expression:integer-or-real): real</term>
        <listitem>
          <para>Returns the trigonometric cosine of an integer or real argument. The result is of type real and expressed in radians.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Function EXP(expression:integer-or-real): real</term>
        <listitem>
          <para>Performs the exponential function to argument, e.g. <constant>e</constant> to the X power. The argument may be of types integer or real.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Function FIELDGET(expression, start-bit, length:integer): integer*</term>
        <listitem>
          <para>This function allows you to selectively extract bit fields from an integer valued expression. The start-bit defines the integer starting bit number of the field to be extracted; 0 is the least significant bit and 15 is the most significant bit. Length defines the integer number of bits in the field, 1 through 16. Bits are extracted starting at start-bit and proceding toward the least significant bit with wrap around through the high order bit positions if necessary. The extracted field is then right justified into a 16-bit result with any unused high order bits set to zero.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Function LN(expression:integer-or-real): real</term>
        <listitem>
          <para>Computes the natural logarithm (base <constant>e</constant>) of an integer or real type argument. The result is of type real.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Function MATHRESULT: integer*</term>
        <listitem>
          <para>Returns the last error number detected during any math operation since the last call to MATHRESULT. The error numbers can be retrieved only if the MATHABORT flag is false, either by a MATHABORT(FALSE) call or by a the runtime '<option>A-</option>' option. See the section on runtime options and the MATHABORT procedure for wore information. If no math errors have been detected, then the result of the MATHRESULT call will be zero. The error numbers which can be returned are shown in the chapter on error messages.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Function ODD(expression:integer):  boolean</term>
        <listitem>
          <para>Returns boolean value of TRUE if the value is an odd number. Argument must be of type integer.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Function ORD(ordinal-type-value) :    integer</term>
        <listitem>
          <para>Takes an argument of any ordinal type (char, integer, boolean, etc.) and returns the ordinal number of the value within that type. For example ORD(Wednesday) of the set (Monday..Friday) is 2.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Function PRED(ordinal-type-value): same-type-as-argument</term>
        <listitem>
          <para>Returns the predecessor value that has an ordinal value of one less than the argument. For example, PRED(7) returns 6; PRED(FRIDAY) returns THURSDAY. If no predecessor exists, (such as PRED(0)) an error occurs.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Function ROUND(expression:real): integer</term>
        <listitem>
          <para>Rounds the real argument up or down to the nearest whole number and returns the result as a type integer value. The result must be small enough to be represented as an integer or an error occurs. Some examples: ROUND(12.1) returns 12; ROUND(12.9) returns 13; ROUND(100000.4) returns an error because the result is too large.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Function SHELL(string-or-char-array): integer*</term>
        <listitem>
          <para>This function calls the OS-9 SHELL, passing the string
          or character array in the parameter area to be executed as an
          OS-9 command. SHELL can be used to access any OS-9 command,
          utility, or to run other concurrent or sequential programs. The
          error code returned from SHELL is converted to an integer
          by prefixing 8 bits of zeros. If a string constant is used,
          it must be at least 2 characters long. If a character array
          is used, a carriage return character must be put in the array
          to terminate the command to SHELL. A carriage return character
          has a decimal value of 13.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Function SIN(expression:integer-or-real): real</term>
        <listitem>
          <para>Returns the trigonometric sine of an integer or real argument. The result is of type real and expressed in radians.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Function SIZEOF(variable-or-type-name): integer*</term>
        <listitem>
          <para>Returns the size (in bytes) of a simple variable, a type, or a complete data structure. Cannot be used on individual elements of arrays or structures.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Function SQR(expression:integer-or-real): same-type-as-argument</term>
        <listitem>
          <para>Computes the square (X*X) of a real or integer argument.  Returns a real or integer result.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Function SQRT(expression:integer-or-real): real</term>
        <listitem>
          <para>Computes the square root of a positive real or integer argument. Returns a real result.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Function SUCC(ordinal-type-value): same-type-as-argument</term>
        <listitem>
          <para>Returns the successor value that has an ordinal value of one more than the argument. For example, SUCC(7) returns 8; SUCC(THURSDAY) returns FRIDAY. If no successor exists (such as SUCC(TRUE)) an error occurs.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Function TRUNC(expression:real): integer</term>
        <listitem>
          <para>Truncates (removes any fractional part of) a real argument and returns a integer-type result. For example TRUNC(12.75) returns 12 as an integer type. The truncated argument must be small enough to be represented or an error occurs.</para>
        </listitem>
      </varlistentry>
    </variablelist>
  </sect1>
</chapter>
